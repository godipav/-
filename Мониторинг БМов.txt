Tab Tab1 = instance.ActiveTab;
string strProfilePath = project.Directory + @"\google_profile.zpprofile";
string strGAuthorizationPath = project.Directory + @"\authorization.json";

//Данные приложения
string strClientId = "671963810339-3ohkcor4r03ml2lvo67o28j0lo2p1dqi.apps.googleusercontent.com";
string strClientSecret = "-KDsi19MARaMwinO53D4IOwX";

//Данные акаунта который будет редактировать таблицу (должен иметь доступ к этой таблице)
string strAccount = "godipav@gmail.com";
string strPassword = "vjq1Frr2feyn";

//Данные таблицы
string strTableId = "1IbWObcMiEKK0PH-NwkzUaqzIANA17yHrHHsz_GjA0kE";
string strSheetName = "Лист1";
string strDataRange = "A2:H2";
string strAllNewsID = "1yzbBbfc-pNwGUXxxiAsAcY4K_4qzdPzFKSK4NQyCkwM";

string strClientCode = String.Empty;
OwnCode.GAuthorization GAuth = null;

bool blnAutoriz = true;
while(blnAutoriz){
	if (File.Exists(strGAuthorizationPath)){
	  GAuth = JsonConvert.DeserializeObject<OwnCode.GAuthorization>(File.ReadAllText(strGAuthorizationPath));
	  project.SendInfoToLog(GAuth.ToString());
	}
	else{
	  if (File.Exists(strProfilePath)){
	    project.Profile.Load(strProfilePath);
	  }else{
	    Tab1.Navigate("https://accounts.google.com/ServiceLogin?hl=ru&passive=true&continue=https://www.google.com/%3Fgws_rd%3Dssl");
	    Tab1.WaitDownloading();

	    Tab1.FindElementById("identifierId").SetValue(strAccount, "Full");
	    Tab1.FindElementById("identifierNext").Click();
	    Thread.Sleep(3000);
	    Tab1.FindElementByXPath("//input[@name='password']", 0).SetValue(strPassword, "Full");
	    Tab1.FindElementById("passwordNext").Click();
	    Thread.Sleep(3000);

	    project.Profile.Save(strProfilePath);
	  }
	  
	  string strVariableScope = "https://www.googleapis.com/auth/spreadsheets";

	  string strAuthPage = String.Format("https://accounts.google.com/o/oauth2/auth?client_id={0}&redirect_uri=urn:ietf:wg:oauth:2.0:oob&scope={1}&response_type=code", strClientId, strVariableScope);
	  Tab1.Navigate(strAuthPage);
	  Tab1.WaitDownloading();

	  Tab1.FindElementByXPath("//div[@role='button']", 0).Click();
	  Tab1.WaitDownloading();
	  Tab1.FindElementById("submit_approve_access").Click();
	  Tab1.WaitDownloading();

	  strClientCode = Tab1.FindElementById("code").GetAttribute("value");
	  project.SendInfoToLog("Получен client code: " + strClientCode);
	  
	  string strAuthQueryData = String.Format("code={0}&client_id={1}&client_secret={2}&redirect_uri=urn:ietf:wg:oauth:2.0:oob&grant_type=authorization_code", 
	    strClientCode, strClientId, strClientSecret);

	  string strAuthResultBody = ZennoPoster.HTTP.Request(ZennoLab.InterfacesLibrary.Enums.Http.HttpMethod.POST, "https://accounts.google.com/o/oauth2/token", strAuthQueryData, respType:ZennoLab.InterfacesLibrary.Enums.Http.ResponceType.BodyOnly);
	  File.WriteAllText(strGAuthorizationPath, strAuthResultBody);
	  GAuth = JsonConvert.DeserializeObject<OwnCode.GAuthorization>(strAuthResultBody);
	}

	string strGetQuery = String.Format("https://sheets.googleapis.com/v4/spreadsheets/{0}/values/{1}!A1:B1?access_token={2}", strTableId, strSheetName, GAuth.access_token);
	string strGetResultBody = ZennoPoster.HttpGet(strGetQuery, "", "UTF-8", ZennoLab.InterfacesLibrary.Enums.Http.ResponceType.BodyOnly, 30000,"");
	project.SendInfoToLog(strGetResultBody);
	if (strGetResultBody.Contains("UNAUTHENTICATED")||strGetResultBody.Contains("PERMISSION_DENIED")){
		File.Delete(strGAuthorizationPath);
	//  string strRefreshQueryData = String.Format("client_id={0}&client_secret={1}&refresh_token={2}&grant_type=refresh_token", 
	//    strClientId, strClientSecret, GAuth.refresh_token);
	//
	//  string strRefreshResultBody = ZennoPoster.HTTP.Request(ZennoLab.InterfacesLibrary.Enums.Http.HttpMethod.POST, "https://accounts.google.com/o/oauth2/token", strRefreshQueryData, respType:ZennoLab.InterfacesLibrary.Enums.Http.ResponceType.BodyOnly);
	//  
	//
	//  File.WriteAllText(strGAuthorizationPath, strRefreshResultBody);
	//  GAuth = JsonConvert.DeserializeObject<OwnCode.GAuthorization>(strRefreshResultBody);  
	  
	}
	else{
		blnAutoriz = false;
	}
}


IZennoTable tblListBMs = project.Tables["ListBMs"];
IZennoList lstListBMs = project.Lists["ListBMs"];

string strStarpostDate = "";
string strStarpostName = "";
string strStarpostLink = "";
string strManagerNick = "";
string strBMPostLink = "";
string strStarpostOldDate = "";
string strAccessToken = GAuth.access_token;

int intSheetID = 0;

bool blnChanges = false;

string strPutContent = "";
string strPutQuery = "";
string strPostResultBody = "";

//класс для работы с API Гугла
OwnCode.GoogleAPI TableResult = new OwnCode.GoogleAPI();


for(int i=0; i<tblListBMs.RowCount; i++){
	project.SendInfoToLog(i.ToString());
	
	//берем название 
	strStarpostOldDate = tblListBMs.GetCell(3,i);
	project.SendInfoToLog(strStarpostOldDate);
	
	//берем ссылку на топик
	strBMPostLink = tblListBMs.GetCell(1,i);
	project.SendInfoToLog(strBMPostLink);

	//ник менеджера
	strManagerNick = tblListBMs.GetCell(0,i);
	project.SendInfoToLog(strManagerNick);


	//Tab Tab1 = instance.ActiveTab;
	Tab1.Navigate(strBMPostLink);
	Tab1.WaitDownloading();
	Thread.Sleep(2000);
	
	string strNewTopic = "";

	//Tab1.Navigate("https://bitcointalk.org/index.php?action=profile;threads;u=1743375;sa=showPosts");
	HtmlElementCollection colStarposts = Tab1.FindElementsByXPath("//tr[@class='titlebg2']");
	foreach(HtmlElement elStarpost in colStarposts){
		strStarpostDate = elStarpost.FindChildByXPath(".//td", 2).GetAttribute("innerHtml");
		strStarpostDate = strStarpostDate.Trim();
		project.SendInfoToLog(strStarpostDate);
		//если переменная содержит слово "Today" заменяем его на сегодняшнюю дату
//        strStarpostDate = "on: <b>Today</b> at 03:32:33 PM";
		if(strStarpostDate.Contains("Today")){
			strStarpostDate = Regex.Replace(strStarpostDate, @"<.*at", DateTime.Now.ToString("MMMM dd, yyyy,", new System.Globalization.CultureInfo("en-US")));
			project.SendInfoToLog(strStarpostDate);
		
		}
		
		//сравниваем старую и новую дату
		if(strStarpostDate!=strStarpostOldDate){
			
			int z = 0;
			
			//если есть хоть один новый старпост
			blnChanges = true;
			
			//забираем ссылку и заголовок старпоста
		    strStarpostName = elStarpost.FindChildByXPath(".//td/a", 2).GetAttribute("innerHtml");
			strStarpostName = System.Net.WebUtility.HtmlDecode(strStarpostName);
			project.SendInfoToLog(strStarpostName);
			strStarpostLink = elStarpost.FindChildByXPath(".//td/a", 2).GetAttribute("href");
			project.SendInfoToLog(strStarpostLink);
			
			//записываем результат в гугл таблицу c помощью POST запросов
			OwnCode.TableData NewData = new OwnCode.TableData();
			NewData.majorDimension = "ROWS";
			NewData.range = String.Format("'{0}'!{1}", strSheetName, strDataRange);
			NewData.values = new List<List<string>>();
			NewData.values.Add(new List<string>(){DateTime.Now.ToString(), strManagerNick, strBMPostLink, strStarpostName, strStarpostDate, strStarpostLink});
			
			//добавить пустую строку в таблицу
			TableResult.NewRow(intSheetID, strAllNewsID, strAccessToken, 1, 2);

			//Грузим изменённые данные в таблицу
			strPutContent = JsonConvert.SerializeObject(NewData);
			strPutQuery = String.Format("https://sheets.googleapis.com/v4/spreadsheets/{0}/values/'{1}'!{2}?access_token={3}&valueInputOption=USER_ENTERED", strAllNewsID, strSheetName, strDataRange, GAuth.access_token);
			strPostResultBody = ZennoPoster.HTTP.Request(ZennoLab.InterfacesLibrary.Enums.Http.HttpMethod.PUT, strPutQuery, strPutContent, "application/json", respType:ZennoLab.InterfacesLibrary.Enums.Http.ResponceType.BodyOnly);
			//project.SendInfoToLog("Ответ сервера на запрос сохранения данных: " + strPostResultBody);
			
			//добавить пустую строку в таблицу
			TableResult.NewRow(intSheetID, strTableId, strAccessToken, 1, 2);

			//Грузим изменённые данные в таблицу
			strPutContent = JsonConvert.SerializeObject(NewData);
			strPutQuery = String.Format("https://sheets.googleapis.com/v4/spreadsheets/{0}/values/'{1}'!{2}?access_token={3}&valueInputOption=USER_ENTERED", strTableId, strSheetName, strDataRange, GAuth.access_token);
			strPostResultBody = ZennoPoster.HTTP.Request(ZennoLab.InterfacesLibrary.Enums.Http.HttpMethod.PUT, strPutQuery, strPutContent, "application/json", respType:ZennoLab.InterfacesLibrary.Enums.Http.ResponceType.BodyOnly);
			
			//записываем только последний старпост(он берется первым)
			if(z==0){
				//записываем ссылку на новый топик в ексель таблицу
				tblListBMs.SetCell(4, i, strStarpostLink);
				//записываем дату нового топика
				tblListBMs.SetCell(3, i, strStarpostDate);
				//записываем заголовок в ексель таблицу
				tblListBMs.SetCell(2, i, strStarpostName);
			}
			z++;
		}
		else{
			break;
		}
	}
	
}

//если ни одного результата не записано 
if(blnChanges==false){
	OwnCode.TableData NewDataOne = new OwnCode.TableData();
	NewDataOne.majorDimension = "ROWS";
	NewDataOne.range = String.Format("'{0}'!{1}", strSheetName, strDataRange);
	NewDataOne.values = new List<List<string>>();
	NewDataOne.values.Add(new List<string>(){"Нет постов за день."});

	//Грузим изменённые данные в таблицу
	strPutContent = JsonConvert.SerializeObject(NewDataOne);
	strPutQuery = String.Format("https://sheets.googleapis.com/v4/spreadsheets/{0}/values/'{1}'!{2}?access_token={3}&valueInputOption=USER_ENTERED", strTableId, strSheetName, strDataRange, GAuth.access_token);
	strPostResultBody = ZennoPoster.HTTP.Request(ZennoLab.InterfacesLibrary.Enums.Http.HttpMethod.PUT, strPutQuery, strPutContent, "application/json", respType:ZennoLab.InterfacesLibrary.Enums.Http.ResponceType.BodyOnly);
}